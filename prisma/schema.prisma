generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  auth0Id     String   @unique @map("auth0_id")
  email       String   @unique
  username    String   @unique
  firstName   String   @map("first_name")
  dateOfBirth DateTime @map("date_of_birth")
  avatarUrl   String?  @map("avatar_url") // User profile avatar image URL
  createdAt   DateTime @default(now()) @map("created_at")
  oneSignalPlayerId String? @map("onesignal_player_id") // OneSignal player ID for push notifications
  
  createdRooms    Room[] @relation("RoomCreatedBy")
  roomsNamedBy    Room[] @relation("RoomNameSetBy")
  roomParticipants RoomParticipant[]
  elements           Element[]
  comments           Comment[]
  commentLikes       CommentLike[]
  roomReactions      RoomReaction[]
  
  // Notification relationships
  notifications        Notification[]  @relation("UserNotifications")
  notificationActions  Notification[]  @relation("ActorNotifications")
  
  // Following relationships
  followers    Follow[] @relation("UserFollowing") // People who follow me
  following    Follow[] @relation("UserFollowers") // People I follow
  
  // Denormalized counts for performance
  followersCount  Int @default(0) @map("followers_count")
  followingCount  Int @default(0) @map("following_count")
  
  @@index([username])
  @@index([firstName])
  @@index([username, firstName])
  @@map("users")
}

model Room {
  id           String   @id @default(uuid())
  name         String   // Required room name
  nameSetBy    String?  @map("name_set_by") // User who set the room name
  nameSetByUser User?   @relation("RoomNameSetBy", fields: [nameSetBy], references: [id])
  createdBy    String   @map("created_by")
  creator      User     @relation("RoomCreatedBy", fields: [createdBy], references: [id])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at") // Track when room content is updated (elements, name, etc)
  commentsUpdatedAt DateTime? @map("comments_updated_at") // Track when comments were last added/deleted
  objectAddedAt DateTime @default(now()) @map("object_added_at") // Track when elements were last added
  reactionCount Int      @default(0) @map("reaction_count")
  lastReactionAt DateTime? @map("last_reaction_at")
  commentCount  Int      @default(0) @map("comment_count") // Track total number of comments
  isActive     Boolean  @default(true) @map("is_active")
  isPublic     Boolean  @default(false) @map("is_public") // Room visibility: false = private (default), true = public
  
  participants RoomParticipant[]
  elements     Element[]
  comments     Comment[]
  reactions    RoomReaction[]
  notifications Notification[]
  
  @@map("rooms")
}

model RoomParticipant {
  roomId         String    @map("room_id")
  userId         String    @map("user_id")
  room           Room      @relation(fields: [roomId], references: [id])
  user           User      @relation(fields: [userId], references: [id])
  joinedAt       DateTime  @default(now()) @map("joined_at")
  leftAt         DateTime? @map("left_at") // Track when user left
  lastVisitedAt  DateTime  @default(now()) @map("last_visited_at") // Track when user last visited room
  color          String    // Hex color for touch circle
  isActive       Boolean   @default(true) @map("is_active")
  
  @@id([roomId, userId])
  @@index([userId]) // Speed up participant lookups
  @@map("room_participants")
}

model Element {
  id         String    @id @default(uuid())
  roomId     String    @map("room_id")
  room       Room      @relation(fields: [roomId], references: [id])
  type       ElementType
  createdBy  String    @map("created_by")
  creator    User      @relation(fields: [createdBy], references: [id])
  positionX  Float     @map("position_x")
  positionY  Float     @map("position_y")
  content    String?   // For notes and horoscopes
  imageUrl   String?   @map("image_url") // For photos
  audioUrl   String?   @map("audio_url") // For audio/voice notes
  videoUrl   String?   @map("video_url") // For videos
  thumbnailUrl String? @map("thumbnail_url") // For video thumbnails (large)
  smallThumbnailUrl String? @map("small_thumbnail_url") // 180px thumbnail for feed previews
  duration   Float?    // Audio/video duration in seconds
  stickerText String?  @map("sticker_text") // Optional custom text for LINK elements
  width      Float
  height     Float
  rotation   Float     @default(0) @map("rotation") // Rotation in degrees (0-360)
  scaleX     Float     @default(1) @map("scale_x") // Horizontal scale factor
  scaleY     Float     @default(1) @map("scale_y") // Vertical scale factor
  zIndex     Int       @default(0) @map("z_index") // Layer order (higher = on top)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  
  referencedInComments Comment[]
  
  @@index([roomId, createdAt(sort: Desc)]) // For efficient recent elements query
  @@index([roomId, zIndex]) // For efficient z-order queries
  @@map("elements")
}

enum ElementType {
  NOTE
  PHOTO
  AUDIO
  HOROSCOPE
  VIDEO
  LINK
}

enum NotificationType {
  ROOM_RENAMED      // "{actor} renamed the room {oldName} to {newName}"
  ELEMENT_ADDED     // "{actor} added {count} {type}" - batched
  PARTICIPANT_LEFT  // "{actor} left the room {roomName}"
  ROOM_DELETED      // "{actor} deleted the room {roomName}"
  ADDED_TO_ROOM     // "{actor} added you to {roomName}"
  REMOVED_FROM_ROOM // "{actor} removed you from {roomName}"
  COMMENT_ADDED     // "{actor} commented in {roomName}"
  MENTION           // "{actor} mentioned you in {roomName}"
  USER_FOLLOWED     // "{actor} started following you"
  COMMENT_LIKE      // "{actor} liked your comment: {commentPreview}"
  ROOM_LIKE         // "{actor} liked your room: {roomName}"
}

model Comment {
  id                    String       @id @default(uuid())
  roomId                String       @map("room_id")
  room                  Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId                String       @map("user_id")
  user                  User         @relation(fields: [userId], references: [id])
  text                  String       @db.Text
  
  // Parent comment for replies
  parentId              String?      @map("parent_id")
  parent                Comment?     @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies               Comment[]    @relation("CommentReplies")
  
  // Like tracking
  likeCount             Int          @default(0) @map("like_count")
  likes                 CommentLike[]
  
  // Mention tracking (optional - stores mentioned usernames as JSON array)
  mentionedUsernames    Json?        @map("mentioned_usernames") @db.Json
  
  referencedElementId   String?      @map("referenced_element_id")
  referencedElement     Element?     @relation(fields: [referencedElementId], references: [id], onDelete: Cascade)
  referencedElementType ElementType? @map("referenced_element_type")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")
  deletedAt             DateTime?    @map("deleted_at")
  
  @@index([roomId, createdAt(sort: Desc)])
  @@index([referencedElementId])
  @@index([parentId])
  @@map("comments")
}

model RoomReaction {
  id        String   @id @default(uuid())
  roomId    String   @map("room_id")
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  emoji     String   @default("❤️") @db.VarChar(10)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
  @@map("room_reactions")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  following   User     @relation("UserFollowing", fields: [followingId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  
  @@unique([followerId, followingId]) // Prevent duplicate follows
  @@index([followerId]) // Fast lookup of who I follow
  @@index([followingId]) // Fast lookup of my followers
  @@map("follows")
}

model CommentLike {
  id        String   @id @default(uuid())
  commentId String   @map("comment_id")
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  
  @@unique([commentId, userId]) // User can only like a comment once
  @@index([commentId])
  @@index([userId])
  @@map("comment_likes")
}

model Notification {
  id                String           @id @default(uuid())
  userId            String           @map("user_id")          // Recipient
  type              NotificationType
  actorId           String           @map("actor_id")        // Who performed the action
  roomId            String?          @map("room_id")         // For room-related notifications
  isRead            Boolean          @default(false)         @map("is_read")
  createdAt         DateTime         @default(now())         @map("created_at")
  
  // Flexible data field for type-specific information
  data              Json             @db.Json                // Stores oldName/newName, elementCount, thumbnails, etc.
  
  // For batching - track the batch window
  batchKey          String?          @map("batch_key")       // e.g., "element_added:roomId:actorId:date"
  batchCount        Int              @default(1)             @map("batch_count")
  batchWindowStart  DateTime?        @map("batch_window_start")
  batchWindowEnd    DateTime?        @map("batch_window_end")
  
  // Relations
  user              User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actor             User             @relation("ActorNotifications", fields: [actorId], references: [id])
  room              Room?            @relation(fields: [roomId], references: [id], onDelete: SetNull)
  
  @@index([userId, isRead, createdAt(sort: Desc)])         // Main query pattern
  @@index([userId, type, createdAt(sort: Desc)])           // Filter by type
  @@index([batchKey, batchWindowEnd])                      // For batch updates
  @@index([roomId])                                         // Room-based queries
  
  @@map("notifications")
}

